name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set Cache Key
      id: cache-key
      run: echo "::set-output name=key::${{ github.sha }}"

    - name: Restore Cache
      id: restore-cache
      uses: actions/cache@v3
      with:
        path: |
          bin/
        # key: ${{ runner.os }}-${{ steps.cache-key.outputs.key }}
        key: sample_key_updated
        enableCrossOsArchive: true
    
    - name: Check Cache
      id: check-cache
      run: |
        if [ ! -d "bin" ]; then
          echo "Cache does not exist."
          echo "::set-output name=cache-exists::false"
        else
          echo "Cache exists"
          echo "::set-output name=cache-exists::true"
        fi

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    - name: Build Project
      if: steps.check-cache.outputs.cache-exists == 'false'
      run: |
        echo steps.check-cache.outputs.cache-exists-${{ steps.check-cache.outputs.cache-exists }}
        dotnet build --configuration Release

    - name: Save Cache
      if: steps.check-cache.outputs.cache-exists == 'false'
      uses: actions/cache@v3
      with:
        path: |
          bin/
        # key: ${{ runner.os}}-${{ steps.cache-key.outputs.key }}
        key: sample_key_updated
        enableCrossOsArchive: true
    - name: Run Application
      run: dotnet bin/Release/net6.0/HelloCache.dll

  windows_build:
    runs-on: windows-latest
    needs: build
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Restore Cache
      id: restore-cache
      uses: actions/cache@v3
      with:
        path: |
          bin/
        # key: ${{ runner.os }}-${{ steps.cache-key.outputs.key }}
        key: sample_key_updated
        enableCrossOsArchive: true
    
    - name: Check Cache
      id: check-cache
      run: |
        if [ ! -d "bin" ]; then
          echo "Cache does not exist."
          echo "::set-output name=cache-exists::false"
        else
          echo "Cache exists"
          echo "::set-output name=cache-exists::true"
        fi
        
      # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Run Application
      run: dotnet bin/Release/net6.0/HelloCache.dll
